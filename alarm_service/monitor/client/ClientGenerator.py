from .Client import Client
from threading import Thread
import os,binascii


class ClientGenerator:
    
    """
    Class that generates client threads that simply send a message and waits for a response or times out if it takes too
    long. See Client.
    
    Attributes
    ----------
    addr : str
        IP address used by all clients generated by this instance
    port : int
        port used by all clients generated by this instance
    client_timeout : int
        timeout in seconds for clients waiting for a response
        
    Methods
    -------
    sendMessage(id : str, message : str)
        Creates a client thread with an id that will send the message and wait for a response
    """
    
    def __init__(self, addr, port, timeout):
        """
        Creates the client generator
        
        Parameters
        ----------
        addr : str
            IP address used by all clients generated by this instance
        port : int
            port used by all clients generated by this instance
        timeout : int
            timeout in seconds for clients waiting for a response
        """
        self.addr = addr
        self.port = port
        self.client_timeout = timeout
        
    def sendMessage(self, id, message):
        """
        Create a new client thread and sends the message.
        
        Parameters
        ----------
        id : str
            A unique identifier for the client. This should be inherited from its caller, so it becomes 
            a identifier of what entity the message came from.
        message : str
            The message to send to the alarm server
        """
        client = Client(id, self.addr, self.port, message, self.client_timeout)
        client.start()
        
    
        